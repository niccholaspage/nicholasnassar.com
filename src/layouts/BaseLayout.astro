---
import Navbar from "../components/nav/Navbar.astro";

interface Props {
  metaDescription: string;
}

const { metaDescription } = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<html lang="en" class="scroll-pt-16 scroll-smooth">
  <head>
    <meta charset="utf-8" />
    <link rel="canonical" href={canonicalURL} />
    <link rel="icon" sizes="any" href="/favicon.ico" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={metaDescription} />
    <title>Nicholas Nassar</title>
  </head>

  <body class="bg-zinc-200 dark:bg-zinc-900 dark:text-white pt-16">
    <header>
      <Navbar />
    </header>
    <div class="container mx-auto px-4">
      <slot />
    </div>
    <script>
      const header = document.querySelector("[data-header]") as HTMLElement;
      const tableOfContents = document.getElementById("table-of-contents") as HTMLElement;
      const headerLinks = [
        ...document.querySelectorAll("[data-header-link]:not([data-mobile-link])"),
      ] as HTMLAnchorElement[];

      const sections = [...document.querySelectorAll("[data-section]")];

      const options: IntersectionObserverInit = {
        root: null,
        rootMargin: `${(header.offsetHeight + tableOfContents.offsetHeight) * -1}px`,
        threshold: 0.1,
      };

      const currentSection = document.getElementById("current-section")!;

      const callback: IntersectionObserverCallback = (entries) => {
        for (const entry of entries) {
          if (entry.isIntersecting) {
            const target = entry.target;
            // TODO: Link section
            // for (const link of headerLinks) {
            //   const linkHref = link.getAttribute("href");
            //   if ((linkHref === "#" && target.id === "") || linkHref === `#${target.id}`) {
            //     link.setAttribute("aria-current", "page");
            //     link.classList.add("bg-violet-900", "text-white");
            //     link.classList.remove("text-violet-300", "hover:bg-violet-700", "hover:text-white");
            //   } else {
            //     link.removeAttribute("aria-current");
            //     link.classList.remove("bg-violet-900", "text-white");
            //     link.classList.add("text-violet-300", "hover:bg-violet-700", "hover:text-white");
            //   }
            // }

            currentSection.textContent = target.getAttribute("data-title");
            console.log(target.getAttribute("data-title"));
            break;
          }
        }
      };

      const observer = new IntersectionObserver(callback, options);

      sections.forEach((section) => {
        observer.observe(section);
      });
    </script>
  </body>
</html>
